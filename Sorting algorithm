#include <stdio.h>
#include <stdlib.h>

/*Here saves diverse sorting algorithem and uses C language to show you!!!*/

void bubble_sort(int *val,int numSize);
void selection_sort1(int *val,int numSize);
void insert_sort(int *val,int numSize);
void shell_sort(int *val,int numSize);
void Quick_sort(int *val, int numSize, int left,int right);
void quick_sort1(int *nums, int pivot, int end1);
void heap_sort(int *val,int numSize);
void swap1(int *val,int x,int y);
void LRadixsort(int *data, int data_length);
void MRadixsort(int *data,int Max_ra,int data_length);




void bubble_sort(int *val,int numSize){

   int i,j;
   int temp;
  for(i=1;i<numSize;++i){
     for(int j=1;j<=numSize-i;++j){
        if(val[j-1] > val[j]){
            temp=val[j-1];
            val[j-1]=val[j];
            val[j]=temp;
        }
     }
  }



}



void selection_sort1(int *val,int numSize){

   int i,j;
   int min_index,temp;
  for(i=0;i<numSize-1;++i){
       min_index=i;
     for(j=i+1;j<numSize;++j){
       if(val[min_index]>val[j]) min_index=j;
     }
            temp=val[i];
            val[i]=val[min_index];
            val[min_index]=temp;
  }

}

void insert_sort(int *val,int numSize){

   int i,j;
   int temp;
for(i=1;i<numSize;++i){
        temp=val[i];
     for(j=i-1;j>=0;--j){
        if(val[j]>temp){
           val[j+1]=val[j];
        }else{
            break;
        }
     }
       val[j+1]=temp;

  }


}


void shell_sort(int *val,int numSize){

     int i,j,c;
     int temp;
     int x=numSize/2;
     int count1=1;

     while(x!=0){
       for(i=0;i<x;++i){
          for(j=i+x;j<numSize;j=j+x){
              temp=val[j];
            for(c=j-x;c>=i;c=c-x){
                if(val[c]>temp){
                  val[c+x]=val[c];
                }else{
                  break;
                }
            }
              val[c+x]=temp;
          }

         }

          printf("0%d:",count1++);
          for(int x=0;x<numSize;++x){
           printf("%d\t",val[x]);
          }
          printf("\n--------------------------\n");
            x=x/2;
     }
}


void Quick_sort(int *val, int numSize, int left,int right){
           int left_i,right_i;
           int i,j,temp;
           if(left<right){
                left_i=left+1;
                right_i=right;
            while(1){
               for(i=left+1;i<=right;++i){
                    if(val[left]<=val[i]){
                          left_i=i;
                          break;
                    }
                        left_i++;
               }

                for(j=right;j>=left+1;--j){
                    if(val[left]>=val[j]){
                          right_i=j;
                          break;
                    }
                        right_i--;
               }
              if(left_i< right_i){
                    temp=val[left_i];
                    val[left_i]=val[right_i];
                    val[right_i]=temp;
              }else break;
             }

                    temp=val[left];
                    val[left]=val[right_i];
                    val[right_i]=temp;
                    Quick_sort(val,numSize,left,right_i-1);
                    Quick_sort(val,numSize,right_i+1,right);

            }



}

void quick_sort1(int *nums, int pivot, int end1){

        int left=pivot+1;
        int right=end1;
        int temp;


    while(left <= right){
        while(nums[pivot] >= nums[left] && left <end1) left++;
        while(nums[pivot] <= nums[right] && right > pivot) right--;
        if(left < right){
           temp=nums[right];
           nums[right]=nums[left];
           nums[left]=temp;
        }else{
            temp=nums[pivot];
            nums[pivot]=nums[right];
            nums[right]=temp;
          quick_sort1(nums,pivot,right-1);
          quick_sort1(nums,right+1,end1);
        }
    }




}



void heap_sort(int *val,int numSize){
    int k,i;

     if(numSize>=2){
         i=numSize/2-1;
         while(i>=0){
            k=i*2+1;
           if(k<numSize-1){
              if( val[k]>val[i]){
                  if(val[k]<val[k+1]){
                      c(val,k,k+1);
                  }
              }else k++;
           }
           if(val[k] >val[i]){
                c(val,k,i);
           }
              i--;
          }
          swap1(val,0,numSize-1);
          heap_sort(val,numSize-1);
       }

}


void swap1(int *val,int x,int y){
      int temp;

      temp=val[x];
      val[x]=val[y];
      val[y]=temp;

}


void LRadixsort(int *data, int data_length){


   int i,j,n;
   int Max_ra=100;
   int temp[10][data_length];
   int templeve_c[10]={0};
   for(int n=1;n<=Max_ra;n*=10){
      for(i=0;i<data_length;++i){
            int m=(data[i]/n)%10;
            temp[m][templeve_c[m]++]=data[i];
      }
        int k=0;
      for(i=0;i<10;++i){
         if(templeve_c[i]){
            for(j=0;j<templeve_c[i];++j) data[k++]=temp[i][j];
            templeve_c[i]=0;
         }
      }
   }

   return;

}

void MRadixsort(int *data,int Max_ra,int data_length){

   int i,j;
   int temp[10][data_length];
   int templeve_c[10]={0}; //表示 0~9每欄裡面有多少元素的次數
   if(Max_ra){
      for(i=0;i<data_length;++i){
            int m=(data[i]/Max_ra)%10;  // max_ra 表示幾位數,預設100
            temp[m][templeve_c[m]++]=data[i];
      }
      int c=0;
      while(c<10){
       if(templeve_c[c]>=2) MRadixsort(&temp[c][0],Max_ra/10,templeve_c[c]); //當templeve_c[c]大於等於2時,在一次呼叫MRadixsort()
        c++;
      }
    }

      int k=0;
      for(i=0;i<10;++i){
         if(templeve_c[i]){
            for(j=0;j<templeve_c[i];++j) data[k++]=temp[i][j];
            templeve_c[i]=0;
         }
      }

   return;

}
